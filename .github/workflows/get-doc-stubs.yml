########################################################################################################################################
# This will attempt to retrieve and generate stubs from MicroPython documentation
########################################################################################################################################
# Check out repos in this structure 
# micropython-stubs
# +-- stubs 
# +-- repos 
#     +-- micropython
#      -- micropython-lib
# repro structure needed to allow automatic PR creation to work
########################################################################################################################################
name: get-doc-stubs

on:
  workflow_dispatch:
  schedule: 
    - cron: "0 1 * * 5"   # Run every Friday at 01:00

jobs:
  ########################################################################################################################################
  get-micropython-doc-stubs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        version: ['v1.17','v1.18','v1.19','v2.0','Latest']
        # version: ['v1.15','v1.16','v1.17','Latest','fix_lib_documentation']

    # Most scripts will be run from the stubber, set that as default
    defaults:
      run:
        shell: bash
  
    steps:

      - name: Checkout stubs repo
        uses: actions/checkout@v2

      # make Python work
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install Python dependencies (stubber)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: get repos
        run: |
          mkdir repos
          stubber clone -p repos

      # micropython as a sub-module 
      - name: 'checkout micropython  ${{ matrix.version }}'
        if: matrix.version!='Latest'
        working-directory: ${{github.workspace}}/repos/micropython
        run: |
          git checkout ${{ matrix.version }}

      - name: Latest checkout micropython/master
        if: matrix.version=='Latest'
        working-directory: ${{github.workspace}}/repos/micropython
        run: |
          git checkout origin/master

      - name: get commit info
        id: mpycommit
        working-directory: ${{github.workspace}}/repos/micropython
        run: |
          echo "::set-output name=info::'$(git log --oneline -1)'"

      ######################################
      # This is where the actual work starts
      ######################################

      - name: Generate document stubs for ${{ matrix.version }}
        run: |
          stubber get-docstubs --stub-folder ${{github.workspace}}/stubs --micropython repos/micropython

      - name: Create Pull Request
        id: cpr-doc
        uses: peter-evans/create-pull-request@v3
        # ref: https://github.com/peter-evans/create-pull-request
        with:
          token: ${{ secrets.CREATE_PR_ACTION_TOKEN }} 
          title: "Add/update MicroPython ${{ matrix.version }} doc-stubs"
          commit-message: add/update doc-stubs
          body : |
            update MicroPython ${{ matrix.version }} doc-stubs
            based on micropython commit ${{ steps.mpycommit.outputs.info }}


          branch: "micropython-${{ matrix.version }}-doc-stubs"
          labels: |
            automated pr
            Doc stubs 
            MicroPython
            ${{ matrix.version }}
          delete-branch: true

      - name: done
        if: always()
        run: |
          echo "Done..."
