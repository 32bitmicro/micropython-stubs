########################################################################################################################################
# This will attempt to retrieve and generate stubs from MicroPython documentation
########################################################################################################################################
# Check out repos in this structure
# micropython-stubs
# +-- stubs
# +-- repos
#     +-- micropython
#      -- micropython-lib
# repro structure needed to allow automatic PR creation to work
########################################################################################################################################
name: get-doc-stubs

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * 5" # Run every Friday at 01:00

jobs:
  ########################################################################################################################################
  list_versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # no need to install python
      - run: pip install pygithub packaging
      - run: python .github/workflows/list_versions.py
        id: dynamic
    outputs:
      job_versions: ${{ steps.dynamic.outputs.versions }}

  ########################################################################################################################################
  get-micropython-doc-stubs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: list_versions
    strategy:
      matrix: ${{ fromJSON(needs.list_versions.outputs.job_versions) }}

    # Most scripts will be run from the stubber, set that as default
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout stubs repo
        uses: actions/checkout@v3

      # make Python work
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: "pip"

      - name: Install Python dependencies (stubber)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # micropython as a sub-module
      - name: "clone and checkout micropython ${{ matrix.version }}"
        run: |
          stubber clone
          stubber switch --tag ${{ matrix.version }}

      ######################################
      # This is where the actual work starts
      ######################################

      - name: Generate document stubs for ${{ matrix.version }}
        run: |
          stubber get-docstubs

      - name: check for changes other than modules.py
        shell: pwsh
        id: changed
        run: |
          write-host "::group:: git diff --name-only:"
          $changed = @(git diff --name-only ./stubs | ?{ $_.Contains(".py")})
          write-host "Changed stub files:" $changed.count
          $changed | %{write-host $_}
          write-host "::set-output name=count::$($changed.count)"
          write-host "::set-output name=changed::$(if ($changed.count -eq 0){"false"}else{"true"})"

      - name: Create Pull Request ( if relevant changes)
        if: ${{ steps.changed.outputs.changed }} == "true"
        shell: pwsh
        run: |
          write-host "Changes detected, creating PR"

      - name: Create Pull Request ( if relevant changes)
        if: ${{ steps.changed.outputs.changed }} == "true"
        id: cpr-doc
        uses: peter-evans/create-pull-request@v3
        # ref: https://github.com/peter-evans/create-pull-request
        with:
          token: ${{ secrets.CREATE_PR_ACTION_TOKEN }}
          title: "Add/update MicroPython ${{ matrix.version }} doc-stubs"
          commit-message: add/update doc-stubs
          body: |
            update MicroPython ${{ matrix.version }} doc-stubs
            based on micropython commit ${{ steps.mpycommit.outputs.info }}

          branch: "micropython-${{ matrix.version }}-doc-stubs"
          labels: |
            automated pr
            Doc stubs 
            MicroPython
            ${{ matrix.version }}
          delete-branch: true

      - name: done
        if: always()
        run: |
          echo "Done..."
