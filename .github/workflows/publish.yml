# workflow to build packages for PyPI
########################################################################################################################################
# This will attempt to retrieve and generate stubs from MicroPython documentation
########################################################################################################################################
# Check out repos in this structure
# micropython-stubs
# +-- stubs
# +-- repos
#     +-- micropython
#      -- micropython-lib
# repro structure needed to allow automatic PR creation to work
########################################################################################################################################
name: publish-stubs

on:
  workflow_dispatch:
  # schedule:
  #   - cron: "0 1 * * 5" # Run every Friday at 01:00
env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1

jobs:
  ########################################################################################################################################
  list-versions-pub:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # no need to install python
      - run: echo Running in folder $(pwd)
      - run: pip install pygithub packaging
      - run: python .github/workflows/list_versions.py
        id: dynamic
    outputs:
      job_versions: ${{ steps.dynamic.outputs.versions }}

  ########################################################################################################################################
  build-publish-stubs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: list-versions-pub
    strategy:
      matrix: ${{ fromJSON(needs.list-versions-pub.outputs.job_versions) }}
    concurrency:
      group: test-mtx
      cancel-in-progress: false

    # continue-on-error: true
    env:
      POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
      POETRY_PYPI_TOKEN_TEST_PYPI:  ${{ secrets.POETRY_PYPI_TOKEN_TEST_PYPI }}      

    steps:
      - name: Checkout stubs repo
        uses: actions/checkout@v3
      - name : Install pip and tools to allow to run under ACT
        run: |
          apt update
          # apt upgrade -y
          apt install -y python3-pip mc
        if : ${{ env.ACT }}
      - run: |
          pip install wheel
          pip install -U micropython-stubber
      - run: |
          echo Running in folder $(pwd)
          stubber --version
          stubber clone --no-stubs
      - run: |
          pip install poetry
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config --list
      # run the build steps for this mpy version
      - run: echo "Building stubs for ${{matrix.version}}"
      - run: stubber switch ${{matrix.version}}
      - run: stubber get-frozen
      - run: stubber get-docstubs
      - run: stubber merge --version ${{matrix.version}}
      - run: stubber build --version ${{matrix.version}} --port auto --board GENERIC

      - name: DO not Commit the changes
        run: echo "Running locally in ACT; Skipped publish stubs for ${{matrix.version}}"
        if : ${{ env.ACT }}

      - name: Commit the changes
        uses: EndBug/add-and-commit@v8
        with:
          message: publish stubs for ${{matrix.version}}
        if : ${{ !env.ACT }}

# ########################################################################################################################################
#   test-mtx:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     needs: list-versions-pub
#     concurrency:
#       group: test-mtx

#     strategy:
#       matrix: ${{ fromJSON(needs.list-versions-pub.outputs.job_versions) }}
#     steps:
#       # run the build steps for this mpy version
#       - run: echo "Building stubs for ${{matrix.version}}"

# ########################################################################################################################################
#   test-py:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     needs: list-versions-pub
#     # strategy:
#     #   matrix: ${{ fromJSON(needs.list-versions-pub.outputs.job_versions) }}
#     steps:
#       # run the build steps for this mpy version
#       - name: run a python script
#         shell: python
#         run: |
#           import json
#           print("Hello World")
#           in_str = '${{ needs.list-versions-pub.outputs }}'
#           print(in_str)
#           print( json.loads(in_str))

