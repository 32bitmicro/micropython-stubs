from _typeshed import Incomplete
from collections.abc import Generator

def count(start: int = ..., step: int = ...) -> Generator[Incomplete, None, None]: ...
def cycle(p) -> Generator[Incomplete, Incomplete, None]: ...
def repeat(el, n: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
def chain(*p) -> Generator[Incomplete, Incomplete, None]: ...
def islice(p, start, stop=..., step: int = ...) -> Generator[Incomplete, None, None]: ...
def tee(iterable, n: int = ...): ...
def starmap(function, iterable) -> Generator[Incomplete, None, None]: ...
def accumulate(iterable, func=...) -> Generator[Incomplete, None, Incomplete]: ...
