from typing import Any

HARD_RESET: int
PWRON_RESET: int
SOFT_RESET: int
DEEPSLEEP_RESET: int
WDT_RESET: int

def idle(*args, **kwargs) -> Any: ...
def freq(*args, **kwargs) -> Any: ...
def info(*args, **kwargs) -> Any: ...
def deepsleep(*args, **kwargs) -> Any: ...
def enable_irq(*args, **kwargs) -> Any: ...
def disable_irq(*args, **kwargs) -> Any: ...
def unique_id(*args, **kwargs) -> Any: ...
def soft_reset(*args, **kwargs) -> Any: ...
def sleep(*args, **kwargs) -> Any: ...
def time_pulse_us(*args, **kwargs) -> Any: ...
def lightsleep(*args, **kwargs) -> Any: ...
def reset(*args, **kwargs) -> Any: ...
def rng(*args, **kwargs) -> Any: ...
def reset_cause(*args, **kwargs) -> Any: ...
def bootloader(*args, **kwargs) -> Any: ...
def bitstream(*args, **kwargs) -> Any: ...

class Pin:
    AF_OD: int
    AF9_TIM14: int
    ALT_OPEN_DRAIN: int
    AF_PP: int
    ALT: int
    AF9_CAN1: int
    AF8_USART6: int
    AF9_TIM13: int
    AF9_CAN2: int
    AF9_TIM12: int
    PULL_UP: int
    OUT_PP: int
    OUT_OD: int
    ANALOG: int
    PULL_DOWN: int
    PULL_NONE: int
    IRQ_FALLING: int
    IN: int
    OUT: int
    IRQ_RISING: int
    OPEN_DRAIN: int
    AF2_TIM5: int
    AF3_TIM10: int
    AF3_TIM11: int
    AF3_TIM8: int
    AF3_TIM9: int
    AF2_TIM4: int
    AF1_TIM1: int
    AF1_TIM2: int
    AF2_TIM3: int
    AF8_UART4: int
    AF6_I2S2: int
    AF7_USART1: int
    AF7_USART2: int
    AF7_USART3: int
    AF4_I2C1: int
    AF5_SPI2: int
    AF4_I2C2: int
    AF5_I2S2: int
    AF5_SPI1: int
    def mode(self, *args, **kwargs) -> Any: ...
    def name(self, *args, **kwargs) -> Any: ...
    def pull(self, *args, **kwargs) -> Any: ...
    def low(self, *args, **kwargs) -> Any: ...
    def irq(self, *args, **kwargs) -> Any: ...
    def pin(self, *args, **kwargs) -> Any: ...
    def port(self, *args, **kwargs) -> Any: ...
    def names(self, *args, **kwargs) -> Any: ...
    def on(self, *args, **kwargs) -> Any: ...
    def off(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def af_list(self, *args, **kwargs) -> Any: ...
    def af(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def high(self, *args, **kwargs) -> Any: ...
    def gpio(self, *args, **kwargs) -> Any: ...
    @classmethod
    def dict(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def debug(cls, *args, **kwargs) -> Any: ...

    class cpu:
        B9: Any
        B8: Any
        B7: Any
        C0: Any
        C1: Any
        C10: Any
        B3: Any
        B2: Any
        B6: Any
        B4: Any
        B5: Any
        B15: Any
        C7: Any
        C6: Any
        C5: Any
        C8: Any
        C9: Any
        C11: Any
        C13: Any
        C12: Any
        C4: Any
        C2: Any
        C3: Any
        D2: Any
        A15: Any
        A14: Any
        A13: Any
        A2: Any
        A3: Any
        A4: Any
        A1: Any
        A0: Any
        A12: Any
        A10: Any
        A11: Any
        B14: Any
        B11: Any
        B10: Any
        B1: Any
        B12: Any
        B13: Any
        A5: Any
        A7: Any
        A6: Any
        B0: Any
        A8: Any
        A9: Any
        def __init__(self, *argv, **kwargs) -> None: ...

    @classmethod
    def mapper(cls, *args, **kwargs) -> Any: ...

    class board:
        X5: Any
        X18: Any
        X4: Any
        X8: Any
        X6: Any
        X7: Any
        X2: Any
        X3: Any
        X19: Any
        X22: Any
        X20: Any
        X21: Any
        Y5: Any
        X9: Any
        Y4: Any
        Y8: Any
        Y6: Any
        Y7: Any
        Y10: Any
        Y3: Any
        Y1: Any
        Y2: Any
        Y11: Any
        Y12: Any
        Y9: Any
        SD_CK: Any
        X17: Any
        SD: Any
        SD_D1: Any
        SD_CMD: Any
        SD_D0: Any
        LED_GREEN: Any
        MMA_INT: Any
        LED_BLUE: Any
        MMA_AVDD: Any
        LED_RED: Any
        LED_YELLOW: Any
        X1: Any
        SD_D2: Any
        USB_VBUS: Any
        X12: Any
        X10: Any
        X11: Any
        SD_SW: Any
        USB_ID: Any
        SD_D3: Any
        USB_DP: Any
        SW: Any
        USB_DM: Any
        def __init__(self, *argv, **kwargs) -> None: ...

    def __init__(self, *argv, **kwargs) -> None: ...

class I2S:
    RX: int
    MONO: int
    STEREO: int
    TX: int
    def shift(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def irq(self, *args, **kwargs) -> Any: ...
    def readinto(self, *args, **kwargs) -> Any: ...
    def deinit(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class SPI:
    LSB: int
    MSB: int
    def deinit(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def write_readinto(self, *args, **kwargs) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def readinto(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

mem8: Any

class RTC:
    def info(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def wakeup(self, *args, **kwargs) -> Any: ...
    def datetime(self, *args, **kwargs) -> Any: ...
    def calibration(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class I2C:
    def readfrom_mem_into(self, *args, **kwargs) -> Any: ...
    def readfrom_into(self, *args, **kwargs) -> Any: ...
    def readfrom_mem(self, *args, **kwargs) -> Any: ...
    def writeto_mem(self, *args, **kwargs) -> Any: ...
    def scan(self, *args, **kwargs) -> Any: ...
    def writeto(self, *args, **kwargs) -> Any: ...
    def writevto(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Any: ...
    def readfrom(self, *args, **kwargs) -> Any: ...
    def readinto(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def stop(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class ADC:
    VREF: int
    CORE_VREF: int
    CORE_VBAT: int
    CORE_TEMP: int
    def read_u16(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class WDT:
    def feed(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class Timer:
    PERIODIC: int
    ONE_SHOT: int
    def init(self, *args, **kwargs) -> Any: ...
    def deinit(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class SoftSPI:
    LSB: int
    MSB: int
    def deinit(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def write_readinto(self, *args, **kwargs) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def readinto(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class UART:
    CTS: int
    RTS: int
    IRQ_RXIDLE: int
    def readchar(self, *args, **kwargs) -> Any: ...
    def sendbreak(self, *args, **kwargs) -> Any: ...
    def irq(self, *args, **kwargs) -> Any: ...
    def deinit(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def writechar(self, *args, **kwargs) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def any(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def readinto(self, *args, **kwargs) -> Any: ...
    def readline(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

mem32: Any
mem16: Any

class SoftI2C:
    def readfrom_mem_into(self, *args, **kwargs) -> Any: ...
    def readfrom_into(self, *args, **kwargs) -> Any: ...
    def readfrom_mem(self, *args, **kwargs) -> Any: ...
    def writeto_mem(self, *args, **kwargs) -> Any: ...
    def scan(self, *args, **kwargs) -> Any: ...
    def writeto(self, *args, **kwargs) -> Any: ...
    def writevto(self, *args, **kwargs) -> Any: ...
    def start(self, *args, **kwargs) -> Any: ...
    def readfrom(self, *args, **kwargs) -> Any: ...
    def readinto(self, *args, **kwargs) -> Any: ...
    def init(self, *args, **kwargs) -> Any: ...
    def stop(self, *args, **kwargs) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...

class Signal:
    def off(self, *args, **kwargs) -> Any: ...
    def on(self, *args, **kwargs) -> Any: ...
    def value(self, *args, **kwargs) -> Any: ...
    def __init__(self, *argv, **kwargs) -> None: ...
